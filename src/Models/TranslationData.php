<?phpnamespace Selenia\Plugins\AdminInterface\Models;use Exception;use Selenia\DataObject;use Selenia\Exceptions\BaseException;use Selenia\Exceptions\FileWriteException;class TranslationData extends DataObject{    const KEY_WIDTH = 24; //max.padding for saved keys    public $fieldNames = [        'key'    ];    public $requiredFields = [        'key'    ];    public $fieldLabels = [        'key' => 'Chave'    ];    public $primaryKeyName = 'key';    public $key;    public $text = [];    public $languages = ['en'];    public function __set($name,$value) {        if (substr($name,0,5) == 'text_')            $this->text[substr($name,5)] = $value;        else $this->$name = $value;    }    public function __get($name) {        if (substr($name,0,5) == 'text_')            return $this->text[substr($name,5)];    }    public function __isset($name) {        if (substr($name,0,5) == 'text_')            return array_key_exists(substr($name,5),$this->text);        return FALSE;    }    public function setLanguages(array $languages) {        $this->languages = $languages;        foreach ($languages as $lang)            $this->fieldNames[] = "text_$lang";    }    private function loadLang($lang) {        global $application;        $data = parse_ini_file($application->toFilePath("$application->i18nPath/$lang.ini"));        if ($data === FALSE)            throw new BaseException("Translation file for language <b>$lang</b> was not found.",Status::FATAL);        return $data;    }    private function load() {        $result = [];        foreach ($this->languages as $lang)            $result[$lang] = $this->loadLang($lang);        return $result;    }    private function save(array $data) {        global $application;        //compute the union of all keys present on all languages        $all = [];        foreach ($this->languages as $lang)            $all = array_merge($all,$data[$lang]);        $keys = array_keys($all);        sort($keys);        //save each language's keys and values to a file        foreach ($this->languages as $lang) {            $path = $application->toFilePath("$application->i18nPath/$lang");            $f = @fopen("$path.tmp",'w');            if ($f === FALSE)                throw new FileWriteException("$path.tmp");            try {                foreach ($keys as $k) {                    $v = $data[$lang][$k];                    $v = str_replace('"','\\"',$v);                    $v = str_replace('&','&amp;',$v);                    $k = str_pad($k,self::KEY_WIDTH);                    fwrite($f,"$k = \"$v\"\n");                }            }            catch(Exception $e) {                fclose($f);                throw $e;            }            fclose($f);            rename("$path.tmp","$path.ini");        }    }    public function read($keyName = null) {        $data = $this->load();        foreach ($this->languages as $lang)            $this->text[$lang] = get($data[$lang],$this->key);    }    public function insert($insertFiles = TRUE) {        $this->update();    }    public function update() {        $this->validate();        $data = $this->load();        foreach ($this->languages as $lang)            $data[$lang][$this->key] = $this->text[$lang];        $this->save($data);    }    public function delete() {        $data = $this->load();        foreach ($this->languages as $lang)            unset($data[$lang][$this->key]);        $this->save($data);    }    public function query() {        $data = $this->load();        $result = [];        foreach ($this->languages as $lang)            foreach ($data[$lang] as $k=>$v) {                if (!isset($result[$k]))                    $result[$k] = [                        'key' => $k                    ];                $result[$k]["text_$lang"] = $v;            }        return array_values($result);    }}